# -*- coding: utf-8 -*-
# курс: ai+python
# модуль 12. структури даних
# тема: стеки. частина 2
#  завдання 1
# використовуючи
# стеки,
# змоделюйте
# роботу
# над
# виконанням проекту. як відомо складні завдання часто
# розбивають на під задачі в процесі роботи, і тільки коли всі
# вони виконані вважається що з основним завданням ви
# впорались.
# створіть клас project
# атрибути:
#  tasks – стек з завданнями, об’єкти класу task ( початкове
# завдання передається в init)
# методи:
#  do_task() – видалити останнє завдання з стеку та
# виконати його, якщо для цього потрібно зробити під
# завдання, то добавити їх у стек
# якщо стек порожній то вивести про це повідомлення
#  is_finished() – true якщо завдань не залишилось
# клас task(уже реалізований):
#  do() – виконує завдання(виводить на екран інформацію
# про це) та повертає список з підзавданням для
# успішного виконаня
class Task:
    def __init__(self, name):
        self.name = name
        self.subtasks = []

    def do(self):
        """
        виконує завдання, за потреби розбиває його на підзавдання
        :return: список підзавдань (об'єкти task)
        """
        if self.subtasks:
            print(f"Виконую завдання: {self.name}. Розбиваю на підзавдання")
        else:
            print(f"Завершено завдання: {self.name}")

        # повертаємо список підзавдань, а не рядок
        return self.subtasks

    def _render(self, indent: int = 0) -> str:
        prefix = "  " * indent + ("- " if indent else "")
        lines = [f"{prefix}{self.name}"]
        for st in self.subtasks:
            lines.append(st._render(indent + 1))
        return "\n".join(lines)


class Project:
    def __init__(self, main_task):
        self.tasks = [main_task]

        print(f"Створено проект з головним завданням: {main_task.name}")

        self.do_task()
        print(f"Завдання {main_task.name} виконано")

    # методи:
    #  do_task() – видалити останнє завдання з стеку та
    # виконати його, якщо для цього потрібно зробити під
    # завдання, то добавити їх у стек
    # якщо стек порожній то вивести про це повідомлення
    #  is_finished() – true якщо завдань не залишилось
    def do_task(self):
        if not self.tasks:
            print("Стек завдань порожній. Завдання виконано")
            return

        # ітеративна обробка стеку без нескінченної рекурсії
        while self.tasks:
            task = self.tasks.pop()
            print(f"Виконую завдання: {task.name}")
            subtasks = task.do()  # очікуємо список task
            if not subtasks:
                # немає підзавдань — завдання завершено
                print(f"Завершено завдання: {task.name}")
                continue
            # додаємо підзавдання у стек у зворотному порядку, щоб перше виконалось першим
            for st in reversed(subtasks):
                if not isinstance(st, Task):
                    # захист від помилкових типів
                    st = Task(str(st))
                self.tasks.append(st)
                print(f"Додано підзавдання: {st.name}")

    def is_finished(self):
        return not self.tasks


task = Task('Підготовка до зйомок')

task.subtasks = [
    Task('Пошук локацій'),
    Task('Підготовка сценарію'),
    Task('Кастинг акторів')
]

# підзавдання для "Пошук локацій"
task.subtasks[0].subtasks = [
    Task('Огляд локацій у місті'),
    Task('Огляд локацій за містом'),
    Task('Узгодження місць для зйомок')
]

# підзавдання для "Підготовка сценарію"
task.subtasks[1].subtasks = [
    Task('Написання основного сценарію'),
    Task('Редагування сценарію'),
    Task('Підготовка сценарних приміток'),
]

# підзавдання для "Кастинг акторів"
task.subtasks[2].subtasks = [
    Task('Пошук головних акторів'),
    Task('Пошук другорядних акторів'),
    Task('Підготовка контрактів для акторів')
]

# підзавдання для "Пошук локацій у місті"
task.subtasks[0].subtasks[0].subtasks = [
    Task('Вибір декорацій для зйомок'),
    Task('Узгодження з власниками приміщень')
]

# підзавдання для "Огляд локацій за містом"
task.subtasks[0].subtasks[1].subtasks = [
    Task('Вибір лісу для сцени битви'),
    Task('Пошук старовинних будівель для сцени'),
]

# підзавдання для "Написання основного сценарію"
task.subtasks[1].subtasks[0].subtasks = [
    Task('Написання першої частини'),
    Task('Написання другої частини'),
]

# підзавдання для "Пошук головних акторів"
task.subtasks[2].subtasks[0].subtasks = [
    Task('Пошук актора на роль головного героя'),
    Task('Пошук актриси на роль головної героїні')
]

project = Project(task)

while not project.is_finished():
    project.do_task()